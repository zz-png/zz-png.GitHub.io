I"~<p>在前阵子的工作中，收到一个bug，大概是在app运行过程中出现了异常，可是查看了app日志、系统日志并没有异常日志打印。最后发现了context.getExternalCacheDir方法返回值为null，原以为bug可以回给系统组的人去修了，在leader的指导下，发现了app中的问题：线程池启动线程的方法为submit，而没有对submit的返回值做处理，在运行过程中也没有catch NPE，任务一直在线程池中错误循环，所以导致了问题，最终将所有线程池的submit方法替换为execute方法，当有未catch的execption时，会直接crash，在系统中打印日志，方便后续的bug处理。</p>

<p>下面说说execute和submit的区别。</p>

<p>首先从源码开始
<strong>submit:</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ExecutorService</span> <span class="kd">extends</span> <span class="nc">Executor</span> <span class="o">{</span>
<span class="err">　　</span><span class="o">...</span>
<span class="err">　　</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Future</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">submit</span><span class="o">(</span><span class="nc">Callable</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">task</span><span class="o">);</span>

<span class="err">　　</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Future</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">submit</span><span class="o">(</span><span class="nc">Runnable</span> <span class="n">task</span><span class="o">,</span> <span class="no">T</span> <span class="n">result</span><span class="o">);</span>

<span class="err">　　</span><span class="nc">Future</span><span class="o">&lt;?&gt;</span> <span class="n">submit</span><span class="o">(</span><span class="nc">Runnable</span> <span class="n">task</span><span class="o">);</span>
<span class="err">　　</span><span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>
<p>通过源码，submit来源于ExecutorService接口，可以看出，在ExecutorService接口中，一共有以上三个sumbit()方法，入参可以为Callable<T>，也可以为Runnable，而且方法有返回值Future<T>；
*(补充说明：Callable<T>与Runnable类似，也是创建线程的一种方式，实现其call()方法即可，方法可以有返回值，而且方法上可以抛出异常)*</T></T></T></p>

<p><strong>execute:</strong>
execute方法来源于Executor接口，上述的ExecutorService接口继承于此，Executor是最上层的，其中只包含一个execute()方法：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Executor</span> <span class="o">{</span>

    <span class="cm">/**
     * Executes the given command at some time in the future.  The command
     * may execute in a new thread, in a pooled thread, or in the calling
     * thread, at the discretion of the {@code Executor} implementation.
     *
     * @param command the runnable task
     * @throws RejectedExecutionException if this task cannot be
     * accepted for execution
     * @throws NullPointerException if command is null
     */</span>
    <span class="kt">void</span> <span class="nf">execute</span><span class="o">(</span><span class="nc">Runnable</span> <span class="n">command</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>总结：</strong>
<strong>（1）可以接受的任务类型不同</strong>
execute只能接受Runnable类型的任务
submit不管是Runnable还是Callable类型的任务都可以接受，但是Runnable返回值均为void，所以使用Future的get()获得的还是null</p>

<p><strong>（2）submit()有返回值，而execute()没有</strong>
例如，有个task，希望该task执行完后告诉我它的执行结果，是成功还是失败，然后继续下面的操作，这时需要用submit</p>

<p><strong>（3）submit()可以进行Exception处理</strong>
例如，如果task里会抛出checked或者unchecked exception，而你又希望外面的调用者能够感知这些exception并做出及时的处理，那么就需要用到submit，通过对Future.get()进行抛出异常的捕获，然后对其进行处理。</p>

:ET